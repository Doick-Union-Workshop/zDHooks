{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"zDExtensions","text":"<p>zDExtensions is a comprehensive Union plugin designed to extend and enhance the functionality of Gothic games. This project provides new external functions and practical hooks, enabling modders to modify and expand game mechanics with ease. The documentation offers descriptions of available features, usage examples, and integration guidelines for your own projects.</p> <p>Plugin was built using the new Union API and can be embedded either as a Union 1.0m plugin or as a completely standalone plugin for base Gothic with System Pack.</p> <p>zDExtensions aims to support the Gothic modding community by delivering reliable, flexible, and well-documented tools for mod development.</p>"},{"location":"#project-structure","title":"Project structure","text":"<p>zDExtensions is divided into two main modules:</p> <ul> <li>Externals \u2013 additional API functions for the Gothic engine, allowing modders to directly interact with game systems and extend their behavior.  </li> <li>Hooks \u2013 event-based extensions that let you override or expand vanilla mechanics by injecting custom logic at specific points in the engine.  </li> </ul>"},{"location":"#authors","title":"Authors","text":"<p>The project began in 2023 and was intended to be not only a toolset, but also a way to learn and experiment with the C++ language and Union plugin development. The goals included simplifying usage, avoiding the need to rely on zParserExtender API injectable scripts in <code>Autorun</code>, and ensuring that externals and features work properly outside of that directory.</p> <p>zDExtensions is inspired by AF Script Packet (AFSP) by Auronen and Fawkes based on Ikarus and LeGo libraries. The developers once mentioned that there were plans for a Union version, but it has not been created yet. This project continues that idea, based on the work of Bad Scientists and exploring first the old and now the new Union APIs.</p> <p>The project is maintained by Doick:</p> <ul> <li>Discord: @doic</li> </ul> <p></p>"},{"location":"#license","title":"License","text":"<p>zDExtensions depends on:</p> <ul> <li>Union API and Gothic API libraries, which are licensed under BSD 3-Clause license</li> <li>BetterDaedalusExternals, which is licensed under MIT license</li> <li>DaedalusCall, which is licensed under MIT license.</li> </ul>"},{"location":"externals/ai/","title":"AI - functions for working with AI","text":""},{"location":"externals/ai/#ai_turntowp","title":"AI_TurnToWP","text":"<p>Turns an NPC to a specified waypoint in the world.</p> <pre><code>func void AI_TurnToWP(var C_NPC npc, var string wp) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>wp</code> - name of waypoint in the game world</li> </ul> Example usage<pre><code>AI_TurnToWP(self, \"WP_START\");\n</code></pre>"},{"location":"externals/ai/#ai_turntovob","title":"AI_TurnToVob","text":"<p>Turns an NPC to a specified freepoint or vob in the world. It works similarly to <code>AI_TurnToWP</code>.</p> <pre><code>func void AI_TurnToVob(var C_NPC npc, var string vob) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>vob</code> - name of freepoint or vob in the game world</li> </ul> Example usage<pre><code>AI_TurnToVob(self, \"CHEST_LOBART\");\n</code></pre>"},{"location":"externals/cast/","title":"CAST - data type conversion functions","text":""},{"location":"externals/cast/#cast_instanceisvob","title":"Cast_InstanceIsVob","text":"<p>Checks whether object is an Vob.</p> <pre><code>func int Cast_InstanceIsVob(var instance object) {};\n</code></pre> <ul> <li><code>object</code> - object to check</li> <li><code>return</code> - <code>TRUE</code> if object is an Vob, <code>FALSE</code> otherwise</li> </ul>"},{"location":"externals/hlp/","title":"HLP - help functions","text":""},{"location":"externals/hlp/#hlp_getitem","title":"Hlp_GetItem","text":"<p>Finds an item object by its instance name.</p> <pre><code>func C_Item Hlp_GetItem(var int itemInstance) {};\n</code></pre> <ul> <li><code>itemInstance</code> - instance name of the item</li> <li><code>return</code> - link to item object</li> </ul> Example usage<pre><code>var C_Item torch; torch = Hlp_GetItem(ItLsTorch);\n</code></pre>"},{"location":"externals/hlp/#hlp_isvalidvob","title":"Hlp_IsValidVob","text":"<p>Checks if vob is in the game world.</p> <pre><code>func int Hlp_IsValidVob(var instance object) {};\n</code></pre> <ul> <li><code>object</code> - any instance</li> <li><code>return</code> - <code>TRUE</code> or <code>FALSE</code></li> </ul>"},{"location":"externals/hlp/#hlp_getnpcplunderedbyplayer","title":"Hlp_GetNpcPlunderedByPlayer","text":"<p>Returns the NPC is currently plundered by the player.</p> <pre><code>func C_NPC Hlp_GetNpcPlunderedByPlayer() {};\n</code></pre> <ul> <li><code>return</code> - NPC</li> </ul>"},{"location":"externals/log/","title":"Log functions","text":""},{"location":"externals/log/#log_getmissionstatus","title":"Log_GetMissionStatus","text":"<p>Returns the status of diary topic. Works only for missions, not for notes.</p> <ul> <li><code>0</code> - Free</li> <li><code>1</code> - Running</li> <li><code>2</code> - Success</li> <li><code>3</code> - Failure</li> <li><code>4</code> - Obsolete</li> </ul> <pre><code>func int Log_GetMissionStatus(var string topic) {};\n</code></pre> <ul> <li><code>topic</code> - name of the mission topic</li> <li><code>return</code> - topic status</li> </ul> Example usage<pre><code>if (Log_GetMissionStatus(TOPIC_InnosEye) == LOG_SUCCESS)\n{\n    //...\n};\n</code></pre>"},{"location":"externals/menu/","title":"Menu functions","text":""},{"location":"externals/menu/#menu_getitemtext","title":"Menu_GetItemText","text":"<p>Returns value of text on first line (<code>0</code> by default) of specified menu item.</p> <pre><code>func string Menu_GetItemText(var string menuItemName, var int line) {};\n</code></pre> <ul> <li><code>menuItemName</code></li> <li><code>line</code> - index of text lines array</li> <li><code>return</code> - text value of menu item</li> </ul> Example usage<pre><code>var string playerGuild;\nplayerGuild = Menu_GetItemText(\"MENU_ITEM_PLAYERGUILD\", 0);\n\nif (Hlp_StrCmp(playerGuild, \"Necromancer\"))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/menu/#menu_setitemtext","title":"Menu_SetItemText","text":"<p>Sets value of specified menu item.</p> <pre><code>func void Menu_SetItemText(var string menuItemName, var string value, var int line, var int drawNow) {};\n</code></pre> <ul> <li><code>menuItemName</code></li> <li><code>value</code> - text value to set</li> <li><code>line</code> - index of text lines array</li> <li><code>drawNow</code></li> </ul> Example usage<pre><code>Menu_SetItemText(\"MENU_ITEM_PLAYERGUILD\", \"Necromancer\", 0, TRUE);\n</code></pre>"},{"location":"externals/mob/","title":"MOB - interactive object functions","text":""},{"location":"externals/mob/#mob_setfocusname","title":"Mob_SetFocusName","text":"<p>Sets the focus name of specified oCMOB in the game world.</p> <pre><code>func void Mob_SetFocusName(var string mobName, var string focusName) {};\n</code></pre> <ul> <li><code>mobName</code></li> <li><code>focusName</code></li> </ul> Example usage<pre><code>Mob_SetFocusName(\"CHEST_LOBART\", \"MOBNAME_CHAIR\");\n</code></pre>"},{"location":"externals/mob/#mob_getfocusname","title":"Mob_GetFocusName","text":"<p>Returns focus name of specified oCMOB in the game world.</p> <pre><code>func string Mob_GetFocusName(var string mobName) {};\n</code></pre> <ul> <li><code>mobName</code></li> <li><code>return</code> - focus name of oCMOB</li> </ul> Example usage<pre><code>var string focusName;\nfocusName = Mob_GetFocusName(\"CHEST_LOBART\");\n\nif (Hlp_StrCmp(focusName, MOBNAME_CHEST))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/","title":"NPC - character functions","text":""},{"location":"externals/npc/#npc_getroutinefuncname","title":"Npc_GetRoutineFuncName","text":"<p>Returns the function name of the NPC's current routine (e.g. <code>RTN_PRESTART_100</code>).</p> <pre><code>func string Npc_GetRoutineFuncName(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - function name of the NPC's current routine</li> </ul> Example usage<pre><code>if (Hlp_StrCmp(Npc_GetRoutineFuncName(self), \"RTN_PreStart_100\"))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_getroutinename","title":"Npc_GetRoutineName","text":"<p>Returns the name of the NPC's current routine (e.g. <code>PRESTART</code>).</p> <pre><code>func string Npc_GetRoutineName(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - name of the NPC's current routine</li> </ul> Example usage<pre><code>if (Hlp_StrCmp(Npc_GetRoutineName(self), \"PreStart\"))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_equipitem","title":"Npc_EquipItem","text":"<p>Equips or unequips the specified item on the NPC.</p> <pre><code>func void Npc_EquipItem(var C_NPC npc, var int itemInstance) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>itemInstance</code> - instance name of the item</li> </ul> Example usage<pre><code>Npc_EquipItem(self, ItLsTorch);\n</code></pre>"},{"location":"externals/npc/#npc_getwalkmode","title":"Npc_GetWalkMode","text":"<p>Returns the current walk mode of the NPC.</p> <pre><code>func int Npc_GetWalkMode(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - integer value of walk mode</li> </ul> Example usage<pre><code>if (Npc_GetWalkMode(self) == NPC_SNEAK)\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_isstanding","title":"Npc_IsStanding","text":"<p>Checks if the NPC is currently standing still.</p> <pre><code>func int Npc_IsStanding(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - <code>TRUE</code> if NPC is standing, <code>FALSE</code> otherwise</li> </ul> Example usage<pre><code>if (Npc_IsStanding(self))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_iswalking","title":"Npc_IsWalking","text":"<p>Checks if the NPC is currently walking.</p> <pre><code>func int Npc_IsWalking(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - <code>TRUE</code> if NPC is walking, <code>FALSE</code> otherwise</li> </ul> Example usage<pre><code>if (Npc_IsWalking(self))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_hasoverlay","title":"Npc_HasOverlay","text":"<p>Checks if the NPC has the specified animation overlay active.</p> <pre><code>func int Npc_HasOverlay(var C_NPC npc, var string overlay) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - <code>TRUE</code> if NPC has overlay with specified name, <code>FALSE</code> otherwise</li> </ul> Example usage<pre><code>if (Npc_HasOverlay(self, \"Humans_Tired.mds\"))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_hastimedoverlay","title":"Npc_HasTimedOverlay","text":"<p>Checks if the NPC has the specified timed animation overlay active.</p> <pre><code>func int Npc_HasTimedOverlay(var C_NPC npc, var string overlay) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> <li><code>return</code> - <code>TRUE</code> if NPC has overlay with specified name, <code>FALSE</code> otherwise</li> </ul> Example usage<pre><code>if (Npc_HasTimedOverlay(self, \"Humans_Sprint.mds\"))\n{\n    //...\n};\n</code></pre>"},{"location":"externals/npc/#npc_opendeadnpcinventory","title":"Npc_OpenDeadNpcInventory","text":"<p>Opens NPC's plunder inventory.</p> <pre><code>func void Npc_OpenDeadNpcInventory(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> </ul> Example usage<pre><code>Npc_OpenDeadNpcInventory(self);\n</code></pre>"},{"location":"externals/npc/#npc_closeinventory","title":"Npc_CloseInventory","text":"<p>Closes NPC's main inventory.</p> <pre><code>func void Npc_CloseInventory(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> </ul> Example usage<pre><code>Npc_CloseInventory(self);\n</code></pre>"},{"location":"externals/npc/#npc_closeinventorysteal","title":"Npc_CloseInventorySteal","text":"<p>Closes the steal inventory of <code>npc</code>'s focus NPC.</p> <pre><code>func void Npc_CloseInventorySteal(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> </ul> Example usage<pre><code>Npc_CloseInventorySteal(self);\n</code></pre>"},{"location":"externals/npc/#npc_closedeadnpcinventory","title":"Npc_CloseDeadNpcInventory","text":"<p>Closes NPC's plunder inventory.</p> <pre><code>func void Npc_CloseDeadNpcInventory(var C_NPC npc) {};\n</code></pre> <ul> <li><code>npc</code> - NPC</li> </ul> Example usage<pre><code>Npc_CloseDeadNpcInventory(self);\n</code></pre>"},{"location":"externals/str/","title":"String functions","text":""},{"location":"externals/str/#str_upper","title":"Str_Upper","text":"<p>Returns string with uppercase.</p> <pre><code>var string Str_Upper(var string str) {};\n</code></pre> <ul> <li><code>str</code> - string to format</li> <li><code>return</code> - formatted string</li> </ul> Example usage<pre><code>var string str; str = Str_Upper(\"Start\");\nPrint(str); // START\n</code></pre>"},{"location":"externals/str/#str_lower","title":"Str_Lower","text":"<p>Returns string with lowercase.</p> <pre><code>var string Str_Lower(var string str) {};\n</code></pre> <ul> <li><code>str</code> - string to format</li> <li><code>return</code> - formatted string</li> </ul> Example usage<pre><code>var string str; str = Str_Lower(\"Start\");\nPrint(str); // start\n</code></pre>"},{"location":"externals/str/#str_capitel","title":"Str_Capitel","text":"<p>Returns string with capitelcase.</p> <pre><code>var string Str_Capitel(var string str) {};\n</code></pre> <ul> <li><code>str</code> - string to format</li> <li><code>return</code> - formatted string</li> </ul> Example usage<pre><code>var string str; str = Str_Capitel(\"start\");\nPrint(str); // Start\n</code></pre>"},{"location":"externals/utils/","title":"Utility functions","text":""},{"location":"externals/utils/#getintarrayvalue","title":"GetIntArrayValue","text":"<p>Returns value of index in the array of integers.</p> <pre><code>func int GetIntArrayValue(var string arr, var int index) {};\n</code></pre> <ul> <li><code>arr</code> - array of integers</li> <li><code>index</code> - position of an element in an array</li> <li><code>return</code> - value of index</li> </ul> Example usage<pre><code>var int i; i = GetIntArrayValue(self.HitChance, NPC_TALENT_1H);\n</code></pre>"},{"location":"externals/utils/#getstringarrayvalue","title":"GetStringArrayValue","text":"<p>Returns value of index in the array of strings.</p> <pre><code>func string GetStringArrayValue(var string arr, var int index) {};\n</code></pre> <ul> <li><code>arr</code> - array of strings</li> <li><code>index</code> - position of an element in an array</li> <li><code>return</code> - value of index</li> </ul> Example usage<pre><code>var string str; str = GetStringArrayValue(TXT_GUILDS, GIL_VLK);\n</code></pre>"},{"location":"externals/utils/#setintarrayvalue","title":"SetIntArrayValue","text":"<pre><code>func void SetIntArrayValue(var string arr, var int index, var int value) {};\n</code></pre> <ul> <li><code>arr</code> - array of integers</li> <li><code>index</code> - position of an element in an array</li> <li><code>value</code> - integer value to set</li> </ul> Example usage<pre><code>SetIntArrayValue(self.HitChance, NPC_TALENT_1H, 25);\n</code></pre>"},{"location":"externals/utils/#setstringarrayvalue","title":"SetStringArrayValue","text":"<pre><code>func void SetStringArrayValue(var string arr, var int index, var string value) {};\n</code></pre> <ul> <li><code>arr</code> - array of strings</li> <li><code>index</code> - position of an element in an array</li> <li><code>value</code> - string value to set</li> </ul> Example usage<pre><code>var string arr[2];\narr[0] = \"Test\";\narr[1] = \"Test2\";\nSetStringArrayValue(arr, 1, \"Test3\");\n</code></pre>"},{"location":"externals/vob/","title":"VOB - functions for object manipulation","text":""},{"location":"externals/vob/#vob_rotate","title":"Vob_Rotate","text":"<p>Rotates a specified vob to the given world coordinates.</p> <pre><code>func void Vob_Rotate(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(0, 180, 90);\nVob_Rotate(\"CHEST_LOBART\", pos);\n</code></pre>"},{"location":"externals/vob/#vob_moveto","title":"Vob_MoveTo","text":"<p>Moves a specified vob to the position of a given waypoint, freepoint, or another vob.</p> <pre><code>func void Vob_MoveTo(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Vob_MoveTo(\"CHEST_LOBART\", \"START\");\n</code></pre>"},{"location":"externals/vob/#vob_movetopos","title":"Vob_MoveToPos","text":"<p>Moves a specified vob to the exact coordinates (X, Y, Z) in the game world.</p> <pre><code>func void Vob_MoveToPos(var string t_vobName, C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(16795, 23120, 1400);\nVob_MoveTo(\"CHEST_LOBART\", pos);\n</code></pre>"},{"location":"externals/vob/#vob_settofloor","title":"Vob_SetToFloor","text":"<p>Sticks a vob with a specified name to the ground.</p> <pre><code>func void Vob_SetToFloor(var string vobName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> </ul> Example usage<pre><code>Vob_SetOnFloor(\"CHEST_LOBART\");\n</code></pre>"},{"location":"externals/vob/#vob_setvisual","title":"Vob_SetVisual","text":"<p>Sets the visual of a specified vob in the game world.</p> <pre><code>func void Vob_SetVisual(var string vobName, var string visualName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>visualName</code> - name of assets (e.g. 3DS, ASC or MDS)</li> </ul> Example usage<pre><code>Vob_SetVisual(\"CHEST_LOBART\", \"CHESTBIG_OCCHESTLARGELOCKED.MDS\");\n</code></pre>"},{"location":"externals/vob/#vob_setcollisiondetection","title":"Vob_SetCollisionDetection","text":"<p>Enables or disables dynamic and static collision detection for a specified vob.</p> <pre><code>func void Vob_SetCollisionDetection(var string vobName, var int dynamicCollDet, var int staticCollDet) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>dynamicCollDet</code></li> <li><code>staticCollDet</code></li> </ul> Example usage<pre><code>Vob_SetCollisionDetection(\"CHEST_LOBART\", FALSE, TRUE);\n</code></pre>"},{"location":"externals/wld/","title":"WLD - world manipulation functions","text":""},{"location":"externals/wld/#wld_insertvob","title":"Wld_InsertVob","text":"<p>Inserts a vob into the world at the position of a given waypoint, freepoint, or another vob.</p> <pre><code>func void Wld_InsertVob(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertVob(\"SECRET_CHEST\", \"WP_START\");\n</code></pre>"},{"location":"externals/wld/#wld_insertmob","title":"Wld_InsertMob","text":"<p>Inserts a static interactive object (mob) into the world at a given location.</p> <pre><code>func void Wld_InsertMob(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertMob(\"SIGNPOST\", \"WP_START\");\n</code></pre>"},{"location":"externals/wld/#wld_insertmobinter","title":"Wld_InsertMobInter","text":"<p>Inserts an interactive mob (e.g., cauldron, forge) into the world at a given location.</p> <pre><code>func void Wld_InsertMobInter(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertMobInter(\"EDDA_CAULDRON\", \"WP_START\");\n</code></pre>"},{"location":"externals/wld/#wld_insertmobcontainer","title":"Wld_InsertMobContainer","text":"<p>Inserts a container mob (e.g., chest) into the world at a given location.</p> <pre><code>func void Wld_InsertMobContainer(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertMobContainer(\"CAVALORN_CHEST\", \"WP_START\");\n</code></pre>"},{"location":"externals/wld/#wld_insertmobfire","title":"Wld_InsertMobFire","text":"<p>Inserts a fire mob (e.g., campfire, torch) into the world at a given location.</p> <pre><code>func void Wld_InsertMobFire(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertMobFire(\"CAVALORN_CAMPFIRE\", \"WP_START\");\n</code></pre>"},{"location":"externals/wld/#wld_insertmobdoor","title":"Wld_InsertMobDoor","text":"<p>Inserts a door mob into the world at a given location.</p> <pre><code>func void Wld_InsertMobDoor(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertMobDoor(\"BOSPER_HOUSE_DOOR\", \"NW_CITY_BOSPER_HOUSE_ENTRANCE\");\n</code></pre>"},{"location":"externals/wld/#wld_insertmobbed","title":"Wld_InsertMobBed","text":"<p>Inserts a bed mob into the world at a given location.</p> <pre><code>func void Wld_InsertMobBed(var string vobName, var string pointName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>pointName</code> - name of waypoint, freepoint or vob in the game world</li> </ul> Example usage<pre><code>Wld_InsertMobDoor(\"BOSPER_BED\", \"NW_CITY_BOSPER_HOUSE_BED\");\n</code></pre>"},{"location":"externals/wld/#wld_insertvobpos","title":"Wld_InsertVobPos","text":"<p>Inserts a vob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertVobPos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(0, 0, 0);\nWld_InsertVobPos(\"SECRET_CHEST\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_insertmobpos","title":"Wld_InsertMobPos","text":"<p>Inserts a mob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertMobPos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(23120, 1400, 16795);\nWld_InsertMobPos(\"SIGNPOST\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_insertmobinterpos","title":"Wld_InsertMobInterPos","text":"<p>Inserts an interactive mob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertMobInterPos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(16795, 1400, 23120);\nWld_InsertMobInterPos(\"EDDA_CAULDRON\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_insertmobcontainerpos","title":"Wld_InsertMobContainerPos","text":"<p>Inserts a container mob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertMobContainerPos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(16795, 23120, 1400);\nWld_InsertMobContainerPos(\"CAVALORN_CHEST\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_insertmobfirepos","title":"Wld_InsertMobFirePos","text":"<p>Inserts a fire mob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertMobFirePos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(16795, 23120, 1400);\nWld_InsertMobFirePos(\"CAVALORN_CAMPFIRE\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_insertmobdoorpos","title":"Wld_InsertMobDoorPos","text":"<p>Inserts a door mob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertMobDoorPos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(1400, 16795, 23120);\nWld_InsertMobDoorPos(\"BOSPER_HOUSE_DOOR\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_insertmobbedpos","title":"Wld_InsertMobBedPos","text":"<p>Inserts a bed mob into the world at exact coordinates.</p> <pre><code>func void Wld_InsertMobBedPos(var string vobName, var C_Position vobPosition) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>vobPosition</code> - coordinates (X, Y, Z) in the game world</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(1400, 16795, 23120);\nWld_InsertMobBedPos(\"BOSPER_BED\", pos);\n</code></pre>"},{"location":"externals/wld/#wld_removevob","title":"Wld_RemoveVob","text":"<p>Removes a specified vob from the game world.</p> <pre><code>func int Wld_RemoveVob(var string vobName) {};\n</code></pre> <ul> <li><code>vobName</code> - name of vob in the game world</li> <li><code>return</code> - <code>TRUE</code> if the vob has been correctly removed, <code>FALSE</code> otherwise</li> </ul> <pre><code>if (Wld_RemoveVob(\"CHEST_LOBART\"))\n{\n    Print(\"Vob successfully removed\");\n};\n</code></pre>"},{"location":"externals/wld/#wld_getpos","title":"Wld_GetPos","text":"<p>Creates and returns a <code>C_Position</code> object from the given coordinates or angles.</p> <pre><code>func C_Position Wld_GetPos(var int posX, var int posY, vart int posZ) {};\n</code></pre> <ul> <li><code>posX</code> - position or angle in X axis</li> <li><code>posY</code> - position or angle in Y axis</li> <li><code>posZ</code> - position or angle in Z axis</li> <li><code>return</code> - C_Position</li> </ul> Example usage<pre><code>var C_Position pos; pos = Wld_GetPos(0, 180, 0);\n</code></pre>"},{"location":"externals/wld/#wld_getplayerportalroom","title":"Wld_GetPlayerPortalRoom","text":"<p>Returns name of portal room where the player currently is.</p> <pre><code>func string Wld_GetPlayerPortalRoom() {};\n</code></pre> <ul> <li><code>return</code> - name of player's portal room</li> </ul> Example usage<pre><code>var string playerPortalRoom;\nplayerPortalRoom = Wld_GetPlayerPortalRoom();\n\nif (Hlp_StrCmp(playerPortalRoom, \"h\u00fctte2\"))\n{\n    //...\n};\n</code></pre>"},{"location":"hooks/hooks_api/","title":"Hooks API","text":"<p>Some features in the project are customizable and require configuration to work correctly. To support this, zDExtensions provide an API (Application Programming Interface) through special hook functions.  </p> <p>These hooks allow you to extend or override parts of the game by writing your own script functions in Daedalus, which are executed at specific events (e.g., when opening a menu or selecting a save slot).</p> <p>Engine restrictions</p> <p>Some hooks are only available on specific engines. For example, certain hooks may work only in Gothic 1 or only in Gothic 2 Addon (G2A). Always check the hook documentation to see which engine it supports. If this information is missing, it means that the hook supports all 4 engines.</p>"},{"location":"hooks/menu_savegame/","title":"Save/Load Game Menu","text":"<p>This hook is triggered whenever the player changes the savegame slot in the Save/Load menu. It allows you to run your own script function at that exact moment.  </p> <p>When a slot is changed, the hook will try to call a Daedalus function named: <code>MENU_SAVELOADGAME_API</code>.</p> Example usage<pre><code>func void MENU_SAVELOADGAME_API()\n{\n    Menu_SetItemText(\"MENUITEM_LOADSAVE_LEVELNAME_VALUE\", \"Valley of Mines\");\n};\n</code></pre>"},{"location":"hooks/menu_status/","title":"Status Menu","text":"<p>This hook is triggered whenever the Status Menu (the character screen with stats) is opened and initialized for display. It allows you to run your own script function right after the status menu is set up.</p> <p>When the status menu is displayed, the hook will try to call a Daedalus function named: <code>MENU_STATUS_API</code>.</p> Example usage<pre><code>func void MENU_STATUS_API()\n{\n    Menu_SetItemText(\"MENU_ITEM_PLAYERGUILD\", \"Necromancer\");\n};\n</code></pre>"},{"location":"hooks/player_drop_item/","title":"Dropping items by player","text":"<p>Engine restrictions</p> <p>It's only available for Gothic 2 Addon (G2A)!</p> <p>This hook is triggered whenever the player tries to drop an item from his inventory into the game world. It lets you control whether an item can be dropped by using a script condition.  </p> <p>When an item is about to be dropped, the hook checks for a Daedalus function: <code>C_PlayerCanDropItem</code>.</p> Example usage<pre><code>func int C_PlayerCanDropItem()\n{\n    if (!Hlp_IsValidItem(item)) { return false; };\n\n    if (Hlp_GetInstanceID(item) == ItMi_InnosEye_Mis)\n    {\n        Print(\"You cannot drop this unique item!\");\n        return false;\n    };\n\n    return true;\n};\n</code></pre>"},{"location":"hooks/player_sell_item/","title":"Selling items by player","text":"<p>Engine restrictions</p> <p>It's only available for Gothic 2 Addon (G2A)!</p> <p>This hook is triggered whenever the player tries to sell an item to an NPC during a trade. It extends the default Gothic 2 Addon trading system by allowing script conditions to decide whether an item can be sold.  </p> <p>When the player attempts to sell an item, the hook looks for the following Daedalus function: <code>C_PlayerCanSellItem</code>.</p> <ul> <li><code>item</code> - selected item in player's inventory to sell</li> <li><code>self</code> - player</li> <li><code>other</code> - trader</li> </ul> Example usage<pre><code>func int C_PlayerCanSellItem()\n{\n    if (!Hlp_IsValidItem(item)) { return false; };\n\n    if (Hlp_GetInstanceID(item) == ItMi_InnosEye_Mis)\n    {\n        Print(\"You cannot sell this unique item!\");\n        AI_PlayAni(self, \"T_NO\");\n        AI_PlayAni(other, \"T_DONTKNOW\");\n        return false;\n    };\n\n    return true;\n};\n</code></pre>"}]}